@model IMS.Models.InstituteModel

@{
    ViewBag.Title = "ContactInfo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<!--begin::Head-->
<head>
    
    <link href="/Content/dist/assets/css/pages/wizard/wizard-1.css?v=7.0.4" rel="stylesheet" type="text/css">
  <style>
      .required::after {
            content: " *";
            font-weight: bold;
            color: red;
        }
  </style>
   
</head>
<!--end::Head-->
<body>
    <div class="subheader py-1 py-lg-2 subheader-transparent" id="kt_subheader">
        <div class="container d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
            <!--begin::Info-->
            <div class="d-flex align-items-center flex-wrap mr-1">
                <!--begin::Page Heading-->
                <div class="d-flex align-items-baseline mr-5">
                    <!--begin::Page Title-->
                    <h5 class="text-dark font-weight-bold my-2 mr-5">Profile</h5>
                    <!--end::Page Title-->
                    <!--begin::Breadcrumb-->
                    <ul class="breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold p-0 my-2 font-size-sm">
                        <li class="breadcrumb-item">
                            <a href="" class="text-muted">Contact Information</a>
                        </li>

                    </ul>
                    <!--end::Breadcrumb-->
                </div>
                <!--end::Page Heading-->
            </div>
            <!--end::Info-->

        </div>
    </div>
    <div class="container">
        <!--begin::Profile Personal Information-->
        <div class="d-flex flex-row">
            <!--begin::Aside-->
            @{Html.RenderAction("AsideMenuOfProfile", "Institute");}
            <!--end::Aside-->
            <!--begin::Content-->
            <div class="flex-row-fluid ml-lg-8">
                <!--begin::Card-->
                <div class="card card-custom card-stretch">
                    @using (Html.BeginForm("ContactInfo", "Institute", FormMethod.Post, new { @class = "form", role = "form", id = "kt_form", enctype = "multipart/form-data" }))
                    {
                        <!--begin::Header-->
                        <div class="card-header py-3">
                            <div class="card-title align-items-start flex-column">
                                <h3 class="card-label font-weight-bolder text-dark">Contact Information</h3>
                                <span class="text-muted font-weight-bold font-size-sm mt-1">Update your Contact informaiton</span>
                            </div>

                        </div>
                        <!--end::Header-->

                <div class="card-body">
                    @Html.HiddenFor(model => model.Mobile)
                    <div class="row">
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right" })
                                    @Html.DisplayFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control mobile-valid col-lg-6 col-md-9 col-sm-12 ", placeholder = "Enter Your Mobile number", @id = "mobile", @autocomplete = "off-1" } })
                                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger", id = "mobilemessage" })
                            </div>
                        </div>
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.AlternateMobile, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right" })
                                @Html.EditorFor(model => model.AlternateMobile, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12 mobile-valid", placeholder = "Enter Your parent mobile", @id = "AlternateMobile", autocomplete = "off-1" } })
                                @Html.ValidationMessageFor(model => model.AlternateMobile, "", new { @class = "text-danger", id = "parentmobilemessage" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right required" })
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "Address", required = "required", @autocomplete = "off-1" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.StateNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right required" })
                                @Html.DropDownListFor(model => model.StateId, new SelectList(Model.StateNames, "Value", "Text"), "--Select State--", new { @id = "ddlState", @class = "form-control col-lg-6 col-md-9 col-sm-12", required = "required" })
                                @Html.ValidationMessageFor(model => model.StateNames, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.DistrictNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right required" })
                                @Html.DropDownListFor(model => model.DistrictId, new SelectList(Model.DistrictNames, "Value", "Text"), "--Select District--", new { @id = "ddlDistrict", @class = "form-control col-lg-6 col-md-9 col-sm-12", required = "required" })
                                @Html.ValidationMessageFor(model => model.DistrictNames, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.TahsilNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right required" })
                                @Html.DropDownListFor(model => model.TahsilId, new SelectList(Model.TahsilNames, "Value", "Text"), "--Select Tahsil/Block--", new { @id = "ddlTahsil", @class = "form-control col-lg-6 col-md-9 col-sm-12", required = "required" })
                                @Html.ValidationMessageFor(model => model.TahsilNames, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.AreaNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right required" })
                                @Html.DropDownListFor(model => model.AreaId, new SelectList(Model.AreaNames, "Value", "Text"), "--Select Location/Area--", new { @id = "ddlArea", @class = "form-control col-lg-6 col-md-9 col-sm-12", required = "required" })
                                @Html.ValidationMessageFor(model => model.AreaNames, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-xl-6">
                            <div class="form-group row">
                                @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "font-size-h6 font-weight-bold text-dark col-lg-4 col-sm-12 text-right required" })
                                @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "PinCode", autocomplete = "off-1" } })
                                @Html.ValidationMessageFor(model => model.PinCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between border-top mt-5 pt-10">
                        <div>
                            <input type="submit" id="btnSubmit" value="Save Changes" name="btnSubmit" class="btn btn-success font-weight-bold text-uppercase px-9 py-4 mr-2" />
                            <a href="@Url.Action("","")" id="backLink" class="btn btn-bg-danger font-weight-bold text-uppercase px-9 py-4">Cancel</a>
                        </div>
                    </div>
                </div>


                    }
                </div>
            </div>
            <!--end::Content-->
        </div>
        <!--end::Profile Personal Information-->
    </div>


    <script src="/Content/dist/assets/plugins/global/plugins.bundle.js?v=7.0.4"></script>
    <script src="/Content/dist/assets/plugins/custom/prismjs/prismjs.bundle.js?v=7.0.4"></script>
    <script src="/Content/dist/assets/js/scripts.bundle.js?v=7.0.4"></script>

    @*<script src="/Content/dist/assets/js/pages/widgets.js?v=7.0.4"></script>*@
    <script src="/Content/dist/assets/js/pages/custom/profile/profile.js?v=7.0.4"></script>

    <script type="text/javascript" language="javascript">

        $('.mobile-valid').on('keypress', function (e) {
            var $this = $(this);
            var regex = new RegExp("^[0-9\b]+$");//^[0-9\b]+$
            var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
            // for 10 digit number only
            if ($this.val().length > 9) {
                e.preventDefault();
                return false;
            }
            if (e.charCode < 54 && e.charCode > 47) {
                if ($this.val().length == 0) {
                    e.preventDefault();
                    return false;
                } else {
                    return true;
                }

            }
            if (regex.test(str)) {
                return true;
            }
            e.preventDefault();
            return false;
        });




        $("#mobile").on("blur", function () {
            var mobNum = $(this).val();
            if (mobNum.length != 10) {
                $('#mobilemessage').html('Invalid Mobile Number');
                $('#mobilemessage').css('color', 'red');
                return false;
            }
            else {
                $('#mobilemessage').html(' ');
            }
        });

        $("#AlternateMobile").change("blur", function () {
            var mobNum = $(this).val();
            if (mobNum != null) {
                if (mobNum.length != 10) {
                    $('#parentmobilemessage').html('Invalid Mobile Number');
                    $('#parentmobilemessage').css('color', 'red');
                    return false;
                }
                else {
                    $('#parentmobilemessage').html(' ');
                }
            }

        });




        $('#ddlState').select2({
            placeholder: "Select a State",
            allowClear: true
        });

        $('#ddlDistrict').select2({
            placeholder: "Select a District",
            allowClear: true
        });

        $('#ddlTahsil').select2({
            placeholder: "Select a Tahsil/Block",
            allowClear: true
        });

        $('#ddlArea').select2({
            placeholder: "Select a Location/Area",
            allowClear: true
        });


        $('#ddlState').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetDistrict",
                data: { stateId: $('#ddlState').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var district = "<select id='ddlDistrict'>";
                    district = district + '<option value="">--Select District--</option>';
                    for (var i = 0; i < data.length; i++) {
                        district = district + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    district = district + '</select>';
                    $('#ddlDistrict').html(district);
                }
            });
        });

        $('#ddlDistrict').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetTahsil",
                data: { districtId: $('#ddlDistrict').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var taluka = "<select id='ddlTahsil'>";
                    taluka = taluka + '<option value="">--Select Block/Tahsil--</option>';
                    for (var i = 0; i < data.length; i++) {
                        taluka = taluka + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    taluka = taluka + '</select>';
                    $('#ddlTahsil').html(taluka);
                }
            });
        });

        $('#ddlTahsil').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetSubUrbanArea",
                data: { talukaId: $('#ddlTahsil').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var area = "<select id='ddlArea'>";
                    area = area + '<option value="">--Select Location/Area--</option>';
                    for (var i = 0; i < data.length; i++) {
                        area = area + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    area = area + '</select>';
                    $('#ddlArea').html(area);
                }
            });
        });
    </script>
    <script type="text/javascript">
        $("#PinCode").attr("maxlength", "6");
        $('#PinCode').keypress(function (event) {
            console.log(event.which);
            if (event.which != 8 && isNaN(String.fromCharCode(event.which))) {
                event.preventDefault();
            }
            if (event.length > 6) {
                event.preventDefault();
                return false;
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            
            $('#AlternateMobile').keyup(checkParentNoMatch);
        });

        function checkParentNoMatch() {

            var mobile = $('#Mobile').val();
            var parentMbl = $("#AlternateMobile").val();
            if (mobile == parentMbl) {
                $("#parentmobilemessage").html("Mobile number and Alternate mobile number Should not be same!");
            }
            else {
                $("#parentmobilemessage").html("");
            }

        }
    </script>
    @if (TempData["Message"] != null)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                @Html.Raw(TempData["Message"]);
            });
        </script>
        TempData["Message"] = null;
    }
</body>

