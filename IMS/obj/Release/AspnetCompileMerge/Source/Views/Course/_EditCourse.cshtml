@model IMS.Models.CourseModel


@{
    Layout = null;
}


<!DOCTYPE html>

<html lang="en">
<!--begin::Head-->
<head>
    <style>
        .required::after {
            content: " *";
            font-weight: bold;
            color: red;
        }
    </style>
</head>
<!--end::Head--><!--end::Head-->
<!--begin::Body-->
<body>
    <div class="modal-dialog modal-lg modal-xl modal-dialog-scrollable" role="document" id="createStaff">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Update Course</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="row justify-content-center my-10 px-8 my-lg-15 px-lg-10">
                    <div class="col-xl-12 col-xxl-10">
                        <!--begin::Wizard Form-->
                        @using (Html.BeginForm("Edit", "Course", FormMethod.Post, new { @class = "form", role = "form", id = "editForm" }))
                        {
                            @Html.AntiForgeryToken()
                            @*<form class="form" id="kt_form">*@
                            <!--begin::Wizard Step 1-->

                        <div class="row">
                            <div class="col-xl-6">
                                <!--begin::Input-->
                                @Html.HiddenFor(model => model.InstituteId, htmlAttributes: new { id = "InstituteId" })
                                @Html.HiddenFor(model => model.CourseId)
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.CourseTypeNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                                    @Html.DropDownListFor(model => model.CourseTypeId, new SelectList(Model.CourseTypeNames, "Value", "Text"), "--Select Course Type--", new { @class = "form-control col-lg-6 col-md-9 col-sm-12", id = "ddlcoursetype", name = "ddlcoursetype" })
                                    @Html.ValidationMessageFor(model => model.CourseTypeNames, "", new { @class = "text-danger" })
                                </div>
                                <!--end::Input-->
                            </div>

                            @*<div class="col-xl-6">
            <div class="form-group row">
                @Html.LabelFor(model => model.CoursePattern, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                <div class="col-9 col-form-label">
                    <div class="radio-inline">
                        <label class="radio radio-success">
                            <input id="singleCourse" type="radio" name="CoursePattern" value="Single" /> SingleCourse
                            <span></span>
                        </label>
                        <label class="radio radio-success">
                            <input id="comboCourse" type="radio" name="CoursePattern" value="Combo" /> ComboCourse
                            <span></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>*@


                            <div class="col-xl-6">
                                <!--begin::Input-->
                                <div class="form-group row">

                                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Enter Course Code", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })

                                </div>
                                <!--end::Input-->
                            </div>

                        </div>

                        <div class="row">

                            <div class="col-xl-6">
                                <!--begin::Input-->
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { id = "courseName", @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Enter Your Course Name", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                                <!--end::Input-->
                            </div>
                            <div class="col-xl-6">
                                <!--begin::Input-->
                                <div class="form-group row">

                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Enter Your Description", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                                </div>
                                <!--end::Input-->
                            </div>
                        </div>

                        <div class="row">

                            <div class="col-xl-6">
                                <!--begin::Input-->
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.DurationNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                                    @Html.DropDownListFor(model => model.DurationId, new SelectList(Model.DurationNames, "Value", "Text"), "--Select Course Type--", new { @class = "form-control col-lg-6 col-md-9 col-sm-12", id = "ddlduration", name = "ddlduration", @autocomplete = "off-1",style="width:200px;" })
                                    @Html.ValidationMessageFor(model => model.DurationNames, "", new { @class = "text-danger" })
                                </div>
                                <!--end::Input-->
                            </div>
                            <div class="col-xl-6">
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.CourseSelectionLimit, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-3 col-sm-12 required" })
                                    @Html.EditorFor(model => model.CourseSelectionLimit, new { htmlAttributes = new { id = "courselimt", @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Course selction limit for student", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.CourseSelectionLimit, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                            
                            <!--end::Wizard Step 1-->
                            <!--begin::Wizard Actions-->
                            <div class="d-flex justify-content-between border-top mt-5 pt-10">

                                <div>
                                    <input type="submit" id="btnSubmit" value="Update" name="btnSubmit" class="btn btn-primary font-weight-bold text-uppercase px-9 py-4" />

                                </div>
                            </div>
                            <!--end::Wizard Actions-->
                            @*</form>*@
                        }
                        <!--end::Wizard Form-->
                    </div>
                </div>
            </div>

        </div>
    </div>
    <script>
            var KTFormControls = function () {

                // Private functions
                var _initDemo1 = function () {
                    (FormValidation.formValidation(
                        document.getElementById('editForm'),
                        {
                            fields: {

                                CourseTypeId: {
                                    validators: {
                                        notEmpty: {
                                            message: 'Please select an option'
                                        }
                                    }
                                },
                                CoursePattern: {
                                    validators: {
                                        choice: {
                                            min: 1,
                                            message: 'Please kindly check Course Pattern'
                                        }
                                    }
                                },
                                Code: {
                                    validators: {
                                        notEmpty: {
                                            message: 'Course Code is required'
                                        }
                                    }
                                },

                                Name: {
                                    validators: {
                                        notEmpty: {
                                            message: 'Course Name is required'
                                        }
                                    }
                                },


                                Description: {
                                    validators: {
                                        notEmpty: {
                                            message: 'Please enter Description text'
                                        },
                                        stringLength: {
                                            min: 1,
                                            max: 100,
                                            message: 'Please enter a menu within text length range 1 and 100'
                                        }
                                    }
                                },
                                DurationId: {
                                    validators: {
                                        notEmpty: {
                                            message: 'Please select an Duration'
                                        }
                                    }
                                },

                            },

                            plugins: { //Learn more: https://formvalidation.io/guide/plugins
                                trigger: new FormValidation.plugins.Trigger(),
                                // Bootstrap Framework Integration
                                bootstrap: new FormValidation.plugins.Bootstrap(),
                                // Validate fields when clicking the Submit button
                                submitButton: new FormValidation.plugins.SubmitButton(),
                                // Submit the form when all fields are valid
                                defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                            }
                        }
                    ));
                }

                return {
                    // public functions
                    init: function () {
                        _initDemo1();
                    }
                };
            }();

            jQuery(document).ready(function () {
                KTFormControls.init();
            });
        </script>
  
    <script>
        $("#courseName").change(function () {
            $.ajax({
                type: "POST",
                url: "../Course/ExistOrNot",
                data: { coursename: $('#courseName').val(), instituteid: $('#InstituteId').val() },
                dataType: "JSON",
                success: function (response) {
                    if (response.d !== "0" || !isEmpty(response)) {
                        Swal.fire("Oops!", "Course name already exists!", "error");
                        $("#btnSubmit").prop('disabled', true);
                    } else {
                        $("#btnSubmit").prop('disabled', false);
                    }
                },
                error: function () {
                    $('#btnSubmit').prop('disabled', false);
                }
            });

        });

        $('#ddlcoursetype').select2({
            placeholder: "Select a Course Type",
            allowClear: true
        });

        $('#ddlduration').select2({
            placeholder: "Select a Duration(in Months)",
            allowClear: true
        });
    </script>



</body>

<!--end::Body-->
</html>


