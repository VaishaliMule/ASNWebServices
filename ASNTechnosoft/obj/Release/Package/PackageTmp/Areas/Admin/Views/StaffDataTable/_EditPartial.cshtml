@model ASNTechnosoft.Areas.Admin.Models.StaffWizardFormModel
@{
    Layout = null;
}
<!DOCTYPE html>

<html lang="en">
<!--begin::Head-->
<head>
  
    <link href="/Content/dist/assets/css/pages/wizard/wizard-1.css?v=7.0.4" rel="stylesheet" type="text/css">
  
</head>

<body id="kt_body" class="header-fixed header-mobile-fixed subheader-enabled page-loading">
    <div class="modal-dialog modal-lg modal-xl modal-dialog-scrollable" role="document" id="createStaff">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body" style="height: 600px;">
                <div class="container">
                    <div class="card card-custom">
                        <div class="card-body p-0">
                            <!--begin::Wizard-->
                            <div class="wizard wizard-1" id="kt_wizard_v1" data-wizard-state="step-first" data-wizard-clickable="false">
                                <!--begin::Wizard Nav-->
                                <div class="wizard-nav border-bottom">
                                    <div class="wizard-steps p-2 p-lg-12">
                                        <!--begin::Wizard Step 1 Nav-->
                                        <div class="wizard-step" data-wizard-type="step" data-wizard-state="current">
                                            <div class="wizard-label">
                                                <i class="wizard-icon flaticon-bus-stop icon-md-2x"></i>
                                                <h3 class="wizard-title">1. Personal Details</h3>
                                            </div>
                                            <span class="svg-icon svg-icon-xl wizard-arrow">
                                                <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Arrow-right.svg-->
                                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                        <polygon points="0 0 24 0 24 24 0 24" />
                                                        <rect fill="#000000" opacity="0.3" transform="translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000)" x="11" y="5" width="2" height="14" rx="1" />
                                                        <path d="M9.70710318,15.7071045 C9.31657888,16.0976288 8.68341391,16.0976288 8.29288961,15.7071045 C7.90236532,15.3165802 7.90236532,14.6834152 8.29288961,14.2928909 L14.2928896,8.29289093 C14.6714686,7.914312 15.281055,7.90106637 15.675721,8.26284357 L21.675721,13.7628436 C22.08284,14.136036 22.1103429,14.7686034 21.7371505,15.1757223 C21.3639581,15.5828413 20.7313908,15.6103443 20.3242718,15.2371519 L15.0300721,10.3841355 L9.70710318,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(14.999999, 11.999997) scale(1, -1) rotate(90.000000) translate(-14.999999, -11.999997)" />
                                                    </g>
                                                </svg>
                                                <!--end::Svg Icon-->
                                            </span>
                                        </div>
                                        <!--end::Wizard Step 1 Nav-->
                                        <!--begin::Wizard Step 2 Nav-->
                                        <div class="wizard-step" data-wizard-type="step">
                                            <div class="wizard-label">
                                                <i class="wizard-icon flaticon-list icon-md-2x"></i>
                                                <h3 class="wizard-title">2. Contact Details</h3>
                                            </div>
                                            <span class="svg-icon svg-icon-xl wizard-arrow">
                                                <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Arrow-right.svg-->
                                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                        <polygon points="0 0 24 0 24 24 0 24" />
                                                        <rect fill="#000000" opacity="0.3" transform="translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000)" x="11" y="5" width="2" height="14" rx="1" />
                                                        <path d="M9.70710318,15.7071045 C9.31657888,16.0976288 8.68341391,16.0976288 8.29288961,15.7071045 C7.90236532,15.3165802 7.90236532,14.6834152 8.29288961,14.2928909 L14.2928896,8.29289093 C14.6714686,7.914312 15.281055,7.90106637 15.675721,8.26284357 L21.675721,13.7628436 C22.08284,14.136036 22.1103429,14.7686034 21.7371505,15.1757223 C21.3639581,15.5828413 20.7313908,15.6103443 20.3242718,15.2371519 L15.0300721,10.3841355 L9.70710318,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(14.999999, 11.999997) scale(1, -1) rotate(90.000000) translate(-14.999999, -11.999997)" />
                                                    </g>
                                                </svg>
                                                <!--end::Svg Icon-->
                                            </span>
                                        </div>
                                        <!--end::Wizard Step 2 Nav-->
                                        <!--begin::Wizard Step 3 Nav-->
                                        <div class="wizard-step" data-wizard-type="step">
                                            <div class="wizard-label">
                                                <i class="wizard-icon flaticon-responsive icon-md-2x"></i>
                                                <h3 class="wizard-title">3. Bank Details</h3>
                                            </div>
                                            <span class="svg-icon svg-icon-xl wizard-arrow">
                                                <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Arrow-right.svg-->
                                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                        <polygon points="0 0 24 0 24 24 0 24" />
                                                        <rect fill="#000000" opacity="0.3" transform="translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000)" x="11" y="5" width="2" height="14" rx="1" />
                                                        <path d="M9.70710318,15.7071045 C9.31657888,16.0976288 8.68341391,16.0976288 8.29288961,15.7071045 C7.90236532,15.3165802 7.90236532,14.6834152 8.29288961,14.2928909 L14.2928896,8.29289093 C14.6714686,7.914312 15.281055,7.90106637 15.675721,8.26284357 L21.675721,13.7628436 C22.08284,14.136036 22.1103429,14.7686034 21.7371505,15.1757223 C21.3639581,15.5828413 20.7313908,15.6103443 20.3242718,15.2371519 L15.0300721,10.3841355 L9.70710318,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(14.999999, 11.999997) scale(1, -1) rotate(90.000000) translate(-14.999999, -11.999997)" />
                                                    </g>
                                                </svg>
                                                <!--end::Svg Icon-->
                                            </span>
                                        </div>
                                        <!--end::Wizard Step 3 Nav-->
                                        <!--begin::Wizard Step 4 Nav-->
                                        <div class="wizard-step" data-wizard-type="step">
                                            <div class="wizard-label">
                                                <i class="wizard-icon flaticon-truck icon-md-2x"></i>
                                                <h3 class="wizard-title">4. Others Details</h3>
                                            </div>
                                            <span class="svg-icon svg-icon-xl wizard-arrow last">
                                                <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Arrow-right.svg-->
                                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                        <polygon points="0 0 24 0 24 24 0 24" />
                                                        <rect fill="#000000" opacity="0.3" transform="translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000)" x="11" y="5" width="2" height="14" rx="1" />
                                                        <path d="M9.70710318,15.7071045 C9.31657888,16.0976288 8.68341391,16.0976288 8.29288961,15.7071045 C7.90236532,15.3165802 7.90236532,14.6834152 8.29288961,14.2928909 L14.2928896,8.29289093 C14.6714686,7.914312 15.281055,7.90106637 15.675721,8.26284357 L21.675721,13.7628436 C22.08284,14.136036 22.1103429,14.7686034 21.7371505,15.1757223 C21.3639581,15.5828413 20.7313908,15.6103443 20.3242718,15.2371519 L15.0300721,10.3841355 L9.70710318,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(14.999999, 11.999997) scale(1, -1) rotate(90.000000) translate(-14.999999, -11.999997)" />
                                                    </g>
                                                </svg>
                                                <!--end::Svg Icon-->
                                            </span>
                                        </div>
                                        <!--end::Wizard Step 4 Nav-->
                                        <!--begin::Wizard Step 5 Nav-->
                                        <div class="wizard-step">
                                            <div class="wizard-label">
                                                <i class="wizard-icon flaticon-globe icon-md-2x"></i>
                                                <h3 class="wizard-title">5. Review and Submit</h3>
                                            </div>
                                            <span class="svg-icon svg-icon-xl wizard-arrow last">
                                                <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Arrow-right.svg-->
                                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                        <polygon points="0 0 24 0 24 24 0 24" />
                                                        <rect fill="#000000" opacity="0.3" transform="translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000)" x="11" y="5" width="2" height="14" rx="1" />
                                                        <path d="M9.70710318,15.7071045 C9.31657888,16.0976288 8.68341391,16.0976288 8.29288961,15.7071045 C7.90236532,15.3165802 7.90236532,14.6834152 8.29288961,14.2928909 L14.2928896,8.29289093 C14.6714686,7.914312 15.281055,7.90106637 15.675721,8.26284357 L21.675721,13.7628436 C22.08284,14.136036 22.1103429,14.7686034 21.7371505,15.1757223 C21.3639581,15.5828413 20.7313908,15.6103443 20.3242718,15.2371519 L15.0300721,10.3841355 L9.70710318,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(14.999999, 11.999997) scale(1, -1) rotate(90.000000) translate(-14.999999, -11.999997)" />
                                                    </g>
                                                </svg>
                                                <!--end::Svg Icon-->
                                            </span>
                                        </div>
                                        <!--end::Wizard Step 5 Nav-->
                                    </div>
                                </div>
                                <!--end::Wizard Nav-->
                                <!--begin::Wizard Body-->
                                <div class="row justify-content-center my-12 px-8 my-lg-15 px-lg-12">
                                    <div class="col-xl-12 col-xxl-10">
                                        <!--begin::Wizard Form-->
                                        @*<form class="form" id="kt_form" method="post" new AjaxOptions { HttpMethod = "Post", OnSuccess = "CreateAddSuccess" },  novalidate="novalidate" enctype="multipart/form-data">*@
                                        @using (Html.BeginForm("Edit", "StaffDataTable", FormMethod.Post, new { @class = "form", role = "form", id = "kt_form", enctype = "multipart/form-data" }))
                                        {
                                            @Html.HiddenFor(model => model.StaffId)
                                            <!--begin::Wizard Step 1-->
                                            <div class="pb-5" id="step1" data-wizard-type="step-content" data-wizard-state="current">
                                                <h3 class="mb-10 font-weight-bold text-dark">Personal Details</h3>

                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Enter Your First Name", @id = "FirstName", @autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">

                                                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Enter Your Last Name", @id = "LastName", @autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", placeholder = "Enter Your Middle Name", @id = "MiddleName", @autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.Gender, new List<SelectListItem>{
                           new SelectListItem(){ Text = "Male", Value = "Male"},
                           new SelectListItem(){ Text = "Female", Value = "Female"},
                           new SelectListItem(){ Text = "TransGender", Value = "TransGender"}
                           }, "--Select Gender--", new { @id = "Gender", @class = "form-control col-lg-6 col-md-9 col-sm-12", name = "Gender", required = "required" })
                                                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "Email", placeholder = "examples@email.com" } })
                                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <!--begin::Select-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12" } })
                                                            @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Select-->
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.QualificationNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.QualificationId, new SelectList(Model.QualificationNames, "Value", "Text"), "--Select Qualification--", new { @class = "form-control col-lg-6 col-md-9 col-sm-12", id = "ddlQualification", name = "ddlQualification" })
                                                            @Html.ValidationMessageFor(model => model.QualificationNames, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <!--begin::Select-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.MarritalStatus, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.MarritalStatus, new List<SelectListItem>{
                           new SelectListItem(){ Text = "Married ", Value = "Married "},
                           new SelectListItem(){ Text = "Single", Value = "Single"},
                           new SelectListItem(){ Text = "Divorcee", Value = "Divorcee"},
                           new SelectListItem(){ Text = "Widow", Value = "Widow"}
                           }, "--Select Gender--", new { @id = "MarritalStatus", @class = "form-control col-lg-6 col-md-9 col-sm-12", name = "MarritalStatus", required = "required" })
                                                            @Html.ValidationMessageFor(model => model.MarritalStatus, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Select-->
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <!--begin::Input-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.Aadhar, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.Aadhar, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", id = "Aadhar", placeholder = "Enter your Aadhar number", autocomplete = "off", type = "adhaar-number", maxLength = "14" } })
                                                            @Html.ValidationMessageFor(model => model.Aadhar, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Input-->
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <!--begin::Select-->
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "PAN", placeholder = "Enter your PAN number", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })
                                                        </div>
                                                        <!--end::Select-->
                                                    </div>
                                                </div>
                                            </div>
                                            <!--end::Wizard Step 1-->
                                            <!--begin::Wizard Step 2-->
                                            <div class="pb-5" data-wizard-type="step-content">
                                                <h4 class="mb-10 font-weight-bold text-dark">Enter the Details of your Contact</h4>
                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12 mobile-valid", @id = "Mobile", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.AlternateMobile, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.AlternateMobile, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12 mobile-valid", @id = "AlternateMobile", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.AlternateMobile, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-xl-6">
                                                        <h4>Current Address</h4>
                                                        <hr />
                                                    </div>
                                                    <div class="col-xl-6">
                                                        <h4>Permanent  Address</h4>
                                                        <hr />
                                                        <input type="checkbox" id="filladdress" name="filladdress" />
                                                        <label>Same as Current Address?</label>
                                                        <br />
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-xl-6">

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.CAddress, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.CAddress, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "CAddress", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.CAddress, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.StateNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.StateId, new SelectList(Model.StateNames, "Value", "Text"), "--Select State--", new { @id = "ddlState", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.StateNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.DistrictNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.DistrictId, new SelectList(Model.DistrictNames, "Value", "Text"), "--Select District--", new { @id = "ddlDistrict", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.DistrictNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.TahsilNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.TahsilId, new SelectList(Model.TahsilNames, "Value", "Text"), "--Select Tahsil/Block--", new { @id = "ddlTahsil", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.TahsilNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.AreaNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.AreaId, new SelectList(Model.AreaNames, "Value", "Text"), "--Select Location/Area--", new { @id = "ddlArea", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.AreaNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "PinCode", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.PinCode, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>

                                                    <div class="col-xl-6">
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PAddress, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.PAddress, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "PAddress", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.PAddress, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PStateNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.PStateId, new SelectList(Model.PStateNames, "Value", "Text"), "--Select State--", new { @id = "ddlPState", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.PStateNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PDistrictNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.PDistrictId, new SelectList(Model.PDistrictNames, "Value", "Text"), "--Select District--", new { @id = "ddlPDistrict", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.PDistrictNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PTahsilNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.PTahsilId, new SelectList(Model.PTahsilNames, "Value", "Text"), "--Select Tahsil--", new { @id = "ddlPTahsil", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.PTahsilNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PAreaNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.DropDownListFor(model => model.PAreaId, new SelectList(Model.PAreaNames, "Value", "Text"), "--Select Location/Area--", new { @id = "ddlPArea", @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                            @Html.ValidationMessageFor(model => model.PAreaNames, "", new { @class = "text-danger" })
                                                        </div>

                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.PPinCode, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                            @Html.EditorFor(model => model.PPinCode, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "PPinCode", autocomplete = "off" } })
                                                            @Html.ValidationMessageFor(model => model.PPinCode, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                            <!--end::Wizard Step 2-->
                                            <!--begin::Wizard Step 3-->
                                            <div class="pb-5" data-wizard-type="step-content">
                                                <h4 class="mb-10 font-weight-bold text-dark">Bank Details</h4>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.HaveBankDetails, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                    <div class="col-9 col-form-label">
                                                        <div class="radio-list">
                                                            <label class="radio radio-success">
                                                                <input id="HaveBankDetails" type="radio" name="HaveBankDetails" value="Yes" checked="checked" /> Yes
                                                                <span></span>
                                                            </label>
                                                            <label class="radio radio-danger">
                                                                <input id="HaveBankDetails2" type="radio" name="HaveBankDetails" value="No" /> No
                                                                <span></span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="Yes selectt">
                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.AccountHolderName, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                        @Html.EditorFor(model => model.AccountHolderName, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "AccountHolderName", autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.AccountHolderName, "", new { @class = "text-danger" })
                                                    </div>

                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.BankAccountNo, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                        @Html.EditorFor(model => model.BankAccountNo, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "BankAccountNo", autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.BankAccountNo, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.IFSCCode, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                        @Html.EditorFor(model => model.IFSCCode, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "IFSCCode", autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.IFSCCode, "", new { @class = "text-danger" })
                                                    </div>

                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                        @Html.EditorFor(model => model.BankName, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "BankName", autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                                                    </div>

                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.BankBranch, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                        @Html.EditorFor(model => model.BankBranch, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12", @id = "BankBranch", autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.BankBranch, "", new { @class = "text-danger" })
                                                    </div>

                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.BankProofUpload, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12", autocomplete = "off" })
                                                        <div class="col-md-10">
                                                            <div class="image-input image-input-empty image-input-outline" id="kt_image_5">
                                                                @if (Model.BankProofUpload != null)
                                                                {
                                                                    <div class="image-input-wrapper" style="background-image: url('/UserImages/@Model.BProofFilename')"></div>
                                                                }
                                                                else
                                                                {
                                                                    <div class="image-input-wrapper" style="background-image: url(/Content/dist/assets/media/users/blank.png)"></div>
                                                                }
                                                                <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="Change avatar">
                                                                    <i class="fa fa-pen icon-sm text-muted"></i>
                                                                    <input type="file" name="ImageFile" accept=".png, .jpg, .jpeg" />
                                                                    <input type="hidden" name="profile_avatar_remove" />
                                                                </label>

                                                                <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="cancel" data-toggle="tooltip" title="Cancel avatar">
                                                                    <i class="ki ki-bold-close icon-xs text-muted"></i>
                                                                </span>

                                                                <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="remove" data-toggle="tooltip" title="Remove avatar">
                                                                    <i class="ki ki-bold-close icon-xs text-muted"></i>
                                                                </span>
                                                            </div>

                                                        </div>

                                                    </div>

                                                </div>
                                            </div>
                                            <!--end::Wizard Step 3-->
                                            <!--begin::Wizard Step 4-->
                                            <div class="pb-5" data-wizard-type="step-content">
                                                <h4 class="mb-10 font-weight-bold text-dark">Setup Your Other details</h4>
                                                @Html.HiddenFor(model => model.InstituteId)

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.DesignationNames, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                    <div class="col-md-10">
                                                        @Html.DropDownListFor(model => model.DesignationId, new SelectList(Model.DesignationNames, "Value", "Text"), "--Select Designation--", new { @class = "form-control col-lg-6 col-md-9 col-sm-12", id = "ddlDesignation", name = "ddlDesignation" })
                                                        @Html.ValidationMessageFor(model => model.DesignationNames, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.salaryType, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                    <div class="col-md-10">
                                                        @Html.DropDownListFor(model => model.salaryType, new SelectList(Enum.GetValues(typeof(SalaryType))), "---Select Salary Type---", new { @class = "form-control col-lg-6 col-md-9 col-sm-12" })
                                                        @Html.ValidationMessageFor(model => model.salaryType, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.TransactionLimit, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.TransactionLimit, new { htmlAttributes = new { @class = "form-control col-lg-6 col-md-9 col-sm-12" } })
                                                        @Html.ValidationMessageFor(model => model.TransactionLimit, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.PhotoUpload, htmlAttributes: new { @class = "font-size-h6 font-weight-bolder text-dark col-lg-4 col-sm-12" })
                                                    <div class="col-md-10">
                                                        <div class="image-input image-input-empty image-input-outline" id="kt_image_6">
                                                            @if (Model.PhotoUpload != null)
                                                            {
                                                                <div class="image-input-wrapper" style="background-image: url('/UserImages/@Model.Photofilename')"></div>
                                                            }
                                                            else
                                                            {
                                                                <div class="image-input-wrapper" style="background-image: url(/Content/dist/assets/media/users/blank.png)"></div>
                                                            }

                                                            <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="Change Photo">
                                                                <i class="fa fa-pen icon-sm text-muted"></i>
                                                                <input type="file" name="PhotoImageFile" accept=".png, .jpg, .jpeg" />
                                                                <input type="hidden" name="profile_avatar_remove" />
                                                            </label>

                                                            <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="cancel" data-toggle="tooltip" title="Cancel Photo">
                                                                <i class="ki ki-bold-close icon-xs text-muted"></i>
                                                            </span>

                                                            <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="remove" data-toggle="tooltip" title="Remove Photo">
                                                                <i class="ki ki-bold-close icon-xs text-muted"></i>
                                                            </span>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                            <!--end::Wizard Step 4-->
                                            <!--begin::Wizard Actions-->
                                            <div class="d-flex justify-content-between border-top mt-5 pt-10">
                                                <div class="mr-2">
                                                    <button type="button" id="prevButton" class="btn btn-light-primary font-weight-bold text-uppercase px-9 py-4" data-wizard-type="action-prev">
                                                        <span class="svg-icon svg-icon-md mr-1">
                                                            <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Left-2.svg-->
                                                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                                    <polygon points="0 0 24 0 24 24 0 24" />
                                                                    <rect fill="#000000" opacity="0.3" transform="translate(15.000000, 12.000000) scale(-1, 1) rotate(-90.000000) translate(-15.000000, -12.000000)" x="14" y="7" width="2" height="10" rx="1" />
                                                                    <path d="M3.7071045,15.7071045 C3.3165802,16.0976288 2.68341522,16.0976288 2.29289093,15.7071045 C1.90236664,15.3165802 1.90236664,14.6834152 2.29289093,14.2928909 L8.29289093,8.29289093 C8.67146987,7.914312 9.28105631,7.90106637 9.67572234,8.26284357 L15.6757223,13.7628436 C16.0828413,14.136036 16.1103443,14.7686034 15.7371519,15.1757223 C15.3639594,15.5828413 14.7313921,15.6103443 14.3242731,15.2371519 L9.03007346,10.3841355 L3.7071045,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(9.000001, 11.999997) scale(-1, -1) rotate(90.000000) translate(-9.000001, -11.999997)" />
                                                                </g>
                                                            </svg>
                                                            <!--end::Svg Icon-->
                                                        </span>Previous
                                                    </button>
                                                </div>
                                                <div>
                                                    <input type="submit" name="submitBtn" id="submitBtn" value='Save' class="btn btn-success font-weight-bold text-uppercase px-9 py-4" data-wizard-type="action-submit" />
                                                    @*<button type="button" class="btn btn-success font-weight-bold text-uppercase px-9 py-4" data-wizard-type="action-submit" name="submitBtn">Submit</button>*@
                                                    <button type="button" id="nextButton" name="submitButton" class="btn btn-primary font-weight-bolder font-size-h6 pl-8 pr-4 py-4 my-3" data-wizard-type="action-next">
                                                        Next
                                                        <span class="svg-icon svg-icon-md ml-1">
                                                            <!--begin::Svg Icon | path:assets/media/svg/icons/Navigation/Right-2.svg-->
                                                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                                    <polygon points="0 0 24 0 24 24 0 24" />
                                                                    <rect fill="#000000" opacity="0.3" transform="translate(8.500000, 12.000000) rotate(-90.000000) translate(-8.500000, -12.000000)" x="7.5" y="7.5" width="2" height="9" rx="1" />
                                                                    <path d="M9.70710318,15.7071045 C9.31657888,16.0976288 8.68341391,16.0976288 8.29288961,15.7071045 C7.90236532,15.3165802 7.90236532,14.6834152 8.29288961,14.2928909 L14.2928896,8.29289093 C14.6714686,7.914312 15.281055,7.90106637 15.675721,8.26284357 L21.675721,13.7628436 C22.08284,14.136036 22.1103429,14.7686034 21.7371505,15.1757223 C21.3639581,15.5828413 20.7313908,15.6103443 20.3242718,15.2371519 L15.0300721,10.3841355 L9.70710318,15.7071045 Z" fill="#000000" fill-rule="nonzero" transform="translate(14.999999, 11.999997) scale(1, -1) rotate(90.000000) translate(-14.999999, -11.999997)" />
                                                                </g>
                                                            </svg>
                                                            <!--end::Svg Icon-->
                                                        </span>
                                                    </button>

                                                    @*<input type="submit" id="submitButton" name="submitButton" value='Next' class="btn btn-primary font-weight-bold text-uppercase px-9 py-4" data-wizard-type="action-next" />*@

                                                </div>
                                            </div>
                                            <!--end::Wizard Actions-->
                                        } <!--</form>-->
                                        <!--end::Wizard Form-->
                                    </div>
                                </div>

                                <!--end::Wizard Body-->
                            </div>
                        </div>
                        <!--end::Wizard-->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/Content/dist/assets/js/pages/custom/wizard/wizard-1.js?v=7.0.4"></script>
    @*<script>
            function redirectOnClick() {
                document.location = 'TestStaffWizard';
            }
        </script>*@

    <script>

        $('#ddlState').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetDistrict",
                data: { stateId: $('#ddlState').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var district = "<select id='ddlDistrict'>";
                    district = district + '<option value="">--Select District--</option>';
                    for (var i = 0; i < data.length; i++) {
                        district = district + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    district = district + '</select>';
                    $('#ddlDistrict').html(district);
                }
            });
        });

        $('#ddlDistrict').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetTahsil",
                data: { districtId: $('#ddlDistrict').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var taluka = "<select id='ddlTahsil'>";
                    taluka = taluka + '<option value="">--Select Block/Tahsil--</option>';
                    for (var i = 0; i < data.length; i++) {
                        taluka = taluka + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    taluka = taluka + '</select>';
                    $('#ddlTahsil').html(taluka);
                }
            });
        });

        $('#ddlTahsil').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetSubUrbanArea",
                data: { talukaId: $('#ddlTahsil').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var area = "<select id='ddlArea'>";
                    area = area + '<option value="">--Select Location/Area--</option>';
                    for (var i = 0; i < data.length; i++) {
                        area = area + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    area = area + '</select>';
                    $('#ddlArea').html(area);
                }
            });
        });

        $('#ddlPState').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetDistrict",
                data: { stateId: $('#ddlPState').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var district = "<select id='ddlPDistrict'>";
                    district = district + '<option value="">--Select District--</option>';
                    for (var i = 0; i < data.length; i++) {
                        district = district + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    district = district + '</select>';
                    $('#ddlPDistrict').html(district);
                }
            });
        });

        $('#ddlPDistrict').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetTahsil",
                data: { districtId: $('#ddlPDistrict').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var taluka = "<select id='ddlPTahsil'>";
                    taluka = taluka + '<option value="">--Select Block/Tahsil--</option>';
                    for (var i = 0; i < data.length; i++) {
                        taluka = taluka + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    taluka = taluka + '</select>';
                    $('#ddlPTahsil').html(taluka);
                }
            });
        });

        $('#ddlPTahsil').change(function () {
            $.ajax({
                type: "post",
                url: "/StaffDataTable/GetSubUrbanArea",
                data: { talukaId: $('#ddlPTahsil').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var area = "<select id='ddlPArea'>";
                    area = area + '<option value="">--Select Location/Area--</option>';
                    for (var i = 0; i < data.length; i++) {
                        area = area + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    area = area + '</select>';
                    $('#ddlPArea').html(area);
                }
            });
        });

        $("#filladdress").on("click", function () {
            if (this.checked) {

                var state1 = $('#ddlState');
                var state2 = $('#ddlPState');
                state2.find('option').remove();
                state1.children().each(function () {
                    state2.append($("<option></option>").
                        attr("value", $(this).val()).
                        text($(this).text()));
                });

                var district1 = $('#ddlDistrict');
                var district2 = $('#ddlPDistrict');
                district2.find('option').remove();
                district1.children().each(function () {
                    district2.append($("<option></option>").
                        attr("value", $(this).val()).
                        text($(this).text()));
                });

                var taluka1 = $('#ddlTahsil');
                var taluka2 = $('#ddlPTahsil');
                taluka2.find('option').remove();
                taluka1.children().each(function () {
                    taluka2.append($("<option></option>").
                        attr("value", $(this).val()).
                        text($(this).text()));
                });

                var area1 = $('#ddlArea');
                var area2 = $('#ddlPArea');
                area2.find('option').remove();
                area1.children().each(function () {
                    area2.append($("<option></option>").
                        attr("value", $(this).val()).
                        text($(this).text()));
                });

                $('#PAddress').val($('#CAddress').val());
                $('#ddlPState').val($('#ddlState').val());
                $('#ddlPDistrict').val($('#ddlDistrict').val());
                $('#ddlPTahsil').val($('#ddlTahsil').val());
                $('#ddlPArea').val($('#ddlArea').val());
                $('#PPinCode').val($('#PinCode').val());

            }
            else {
                $("#PAddress").val('');
                $("#ddlPState").val('');
                $("#ddlPDistrict").val('');
                $("#ddlPTahsil").val('');
                $("#ddlPArea").val('');
                $("#PPinCode").val('');
            }
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $('input[type="radio"]').click(function () {
                var inputValue = $(this).attr("value");
                var targetBox = $("." + inputValue);
                $(".selectt").not(targetBox).hide();
                $(targetBox).show();
            });
        });


    </script>

    <script type="text/javascript" language="javascript">
        var avatar5 = new KTImageInput('kt_image_5');
        var avatar5 = new KTImageInput('kt_image_6');

        $('#PAN').keyup(function () {
            $(this).val($(this).val().toUpperCase());
        });

        $('#IFSCCode').keyup(function () {
            $(this).val($(this).val().toUpperCase());
        });

        $('#Email').keydown(function () {
            $(this).val($(this).val().toLowerCase());
        });

        $('.mobile-valid').on('keypress', function (e) {
            var $this = $(this);
            var regex = new RegExp("^[0-9\b]+$");
            var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
            // for 10 digit number only
            if ($this.val().length > 9) {
                e.preventDefault();
                return false;
            }
            if (e.charCode < 54 && e.charCode > 47) {
                if ($this.val().length == 0) {
                    e.preventDefault();
                    return false;
                } else {
                    return true;
                }

            }
            if (regex.test(str)) {
                return true;
            }
            e.preventDefault();
            return false;
        });

        $('#ddlQualification').select2({
            placeholder: "Select a Qualification",
            allowClear: true
        });
        $('#ddlDesignation').select2({
            placeholder: "Select a Designation",
            allowClear: true
        });
        $('#ddlState').select2({
            placeholder: "Select a State",
            allowClear: true
        });
        $('#ddlDistrict').select2({
            placeholder: "Select a District",
            allowClear: true
        });
        $('#ddlTahsil').select2({
            placeholder: "Select a Tahsil/Block",
            allowClear: true
        });
        $('#ddlArea').select2({
            placeholder: "Select a Location/Area",
            allowClear: true
        });
        $('#ddlPState').select2({
            placeholder: "Select a State",
            allowClear: true
        });
        $('#ddlPDistrict').select2({
            placeholder: "Select a District",
            allowClear: true
        });
        $('#ddlPTahsil').select2({
            placeholder: "Select a Tahsil/Block",
            allowClear: true
        });
        $('#ddlPArea').select2({
            placeholder: "Select a Location/Area",
            allowClear: true
        });

        $('#DOB').datepicker({
            rtl: KTUtil.isRTL(),
            todayHighlight: true,
            orientation: "bottom left",
            autoclose: true
        });
        //$('#Gender').select2({
        //    placeholder: "Select Gender",
        //    allowClear: true
        //});
        //$('#MarritalStatus').select2({
        //    placeholder: "Select Marrital Status",
        //    allowClear: true
        //});
        $('[type="adhaar-number"]').keyup(function () {
            var value = $(this).val();
            value = value.replace(/\D/g, "").split(/(?:([\d]{4}))/g).filter(s => s.length > 0).join("-");
            $(this).val(value);
        });

        $('[type="adhaar-number"]').on("change, blur", function () {
            var value = $(this).val();
            var maxLength = $(this).attr("maxLength");
            if (value != null) {
                if (value.length > 0) {
                    if (value.length == maxLength) {
                        $(this).addClass("is-valid");
                        $(this).removeClass("is-invalid");
                    } else {
                        $(this).addClass("is-invalid");
                        $(this).removeClass("is-valid");
                    }
                } else {
                    $(this).removeClass("is-valid");
                    $(this).removeClass("is-invalid");
                }

            }
        });

    </script>

    <script type="text/javascript">
        $("#PinCode").attr("maxlength", "6");
        $('#PinCode').keypress(function (event) {
            console.log(event.which);
            if (event.which != 8 && isNaN(String.fromCharCode(event.which))) {
                event.preventDefault();
            }
            if (event.length > 6) {
                event.preventDefault();
                return false;
            }
        });


         $("#PPinCode").attr("maxlength", "6");
        $('#PPinCode').keypress(function (event) {
            console.log(event.which);
            if (event.which != 8 && isNaN(String.fromCharCode(event.which))) {
                event.preventDefault();
            }
            if (event.length > 6) {
                event.preventDefault();
                return false;
            }
        });
    </script>

    <script>
        var KTWizard1 = function () {
            // Base elements
            var _wizardEl;
            var _formEl;
            var _wizard;
            var _validations = [];

            // Private functions
            var initWizard = function () {
                // Initialize form wizard
                _wizard = new KTWizard(_wizardEl, {
                    startStep: 1, // initial active step number
                    clickableSteps: true  // allow step clicking
                });

                // Validation before going to next page
                _wizard.on('beforeNext', function (wizard) {
                    // Don't go to the next step yet
                    _wizard.stop();

                    // Validate form
                    var validator = _validations[wizard.getStep() - 1]; // get validator for currnt step
                    validator.validate().then(function (status) {
                        if (status == 'Valid') {
                            _wizard.goNext();
                            KTUtil.scrollTop();
                        } else {
                            Swal.fire({
                                text: "Sorry, looks like there are some errors detected, please try again.",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn font-weight-bold btn-light"
                                }
                            }).then(function () {
                                KTUtil.scrollTop();
                            });
                        }
                    });
                });

                // Change event
                _wizard.on('change', function (wizard) {
                    KTUtil.scrollTop();
                });
            }

            var initValidation = function () {
                // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
                // Step 1
                _validations.push(FormValidation.formValidation(
                    _formEl,
                    {
                        fields: {
                            FirstName: {
                                validators: {
                                    notEmpty: {
                                        message: 'FirstName is required'
                                    }
                                }
                            },
                            LastName: {
                                validators: {
                                    notEmpty: {
                                        message: 'LastName is required'
                                    }
                                }
                            },
                            Email: {
                                validators: {
                                    notEmpty: {
                                        message: 'Email is required'
                                    }
                                }
                            },

                            QualificationId: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select an option'
                                    }
                                }
                            },

                            Gender: {
                                validators: {
                                    choice: {
                                        min: 1,
                                        message: 'Please select gender'
                                    }
                                }
                            },

                            MarritalStatus: {
                                validators: {
                                    choice: {
                                        min: 1,
                                        message: 'Please select Marital status'
                                    }
                                }
                            },


                        },
                        plugins: {
                            trigger: new FormValidation.plugins.Trigger(),
                            bootstrap: new FormValidation.plugins.Bootstrap()
                        }
                    }
                ));

                // Step 2
                _validations.push(FormValidation.formValidation(
                    _formEl,
                    {
                        fields: {
                            CAddress: {
                                validators: {
                                    notEmpty: {
                                        message: 'Address is required'
                                    }
                                }
                            },
                            StateId: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select your State'
                                    }
                                }
                            },
                            DistrictId: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select your District'
                                    }
                                }
                            },
                            TahsilId: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select your Tahsil/Block'
                                    }
                                }
                            },
                            AreaId: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select your Area/Location'
                                    }
                                }
                            },
                            Mobile: {
                                validators: {
                                    notEmpty: {
                                        message: 'Mobile number is required'
                                    }
                                }
                            },

                        },
                        plugins: {
                            trigger: new FormValidation.plugins.Trigger(),
                            bootstrap: new FormValidation.plugins.Bootstrap()
                        }
                    }
                ));

                // Step 3
                _validations.push(FormValidation.formValidation(
                    _formEl,
                    {
                        fields: {

                            HaveBankDetails: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select an option'
                                    }

                                }
                            },

                        },
                        plugins: {
                            trigger: new FormValidation.plugins.Trigger(),
                            bootstrap: new FormValidation.plugins.Bootstrap()
                        }
                    }
                ));

                // Step 4
                _validations.push(FormValidation.formValidation(
                    _formEl,
                    {
                        fields: {
                            TransactionLimit: {
                                validators: {
                                    notEmpty: {
                                        message: 'Transaction limit required'
                                    }
                                }
                            },
                            DesignationId: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select designation'
                                    }
                                }
                            },
                            salaryType: {
                                validators: {
                                    notEmpty: {
                                        min: 1,
                                        message: 'Please select salary type'
                                    }
                                }
                            },

                        },
                        plugins: {
                            trigger: new FormValidation.plugins.Trigger(),
                            bootstrap: new FormValidation.plugins.Bootstrap()
                        }
                    }
                ));
            }

            return {
                // public functions
                init: function () {
                    _wizardEl = KTUtil.getById('kt_wizard_v1');
                    _formEl = KTUtil.getById('kt_form');

                    initWizard();
                    initValidation();
                }
            };
        }();

        jQuery(document).ready(function () {
            KTWizard1.init();
        });
    </script>

</body>


<!--end::Body-->
</html>









